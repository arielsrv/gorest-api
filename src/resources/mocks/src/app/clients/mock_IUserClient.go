// Code generated by mockery. DO NOT EDIT.

package clients

import (
	mock "github.com/stretchr/testify/mock"
	model "gitlab.com/iskaypetcom/digital/oms/api-core/gorest-api/src/app/model"
	paging "gitlab.com/iskaypetcom/digital/oms/api-core/gorest-api/src/app/model/paging"
)

// MockIUserClient is an autogenerated mock type for the IUserClient type
type MockIUserClient struct {
	mock.Mock
}

type MockIUserClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserClient) EXPECT() *MockIUserClient_Expecter {
	return &MockIUserClient_Expecter{mock: &_m.Mock}
}

// GetComments provides a mock function with given fields: postID
func (_m *MockIUserClient) GetComments(postID int) ([]model.CommentResponse, error) {
	ret := _m.Called(postID)

	if len(ret) == 0 {
		panic("no return value specified for GetComments")
	}

	var r0 []model.CommentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.CommentResponse, error)); ok {
		return rf(postID)
	}
	if rf, ok := ret.Get(0).(func(int) []model.CommentResponse); ok {
		r0 = rf(postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserClient_GetComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComments'
type MockIUserClient_GetComments_Call struct {
	*mock.Call
}

// GetComments is a helper method to define mock.On call
//   - postID int
func (_e *MockIUserClient_Expecter) GetComments(postID interface{}) *MockIUserClient_GetComments_Call {
	return &MockIUserClient_GetComments_Call{Call: _e.mock.On("GetComments", postID)}
}

func (_c *MockIUserClient_GetComments_Call) Run(run func(postID int)) *MockIUserClient_GetComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockIUserClient_GetComments_Call) Return(_a0 []model.CommentResponse, _a1 error) *MockIUserClient_GetComments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserClient_GetComments_Call) RunAndReturn(run func(int) ([]model.CommentResponse, error)) *MockIUserClient_GetComments_Call {
	_c.Call.Return(run)
	return _c
}

// GetPosts provides a mock function with given fields: userID
func (_m *MockIUserClient) GetPosts(userID int) ([]model.PostResponse, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetPosts")
	}

	var r0 []model.PostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.PostResponse, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []model.PostResponse); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PostResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserClient_GetPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPosts'
type MockIUserClient_GetPosts_Call struct {
	*mock.Call
}

// GetPosts is a helper method to define mock.On call
//   - userID int
func (_e *MockIUserClient_Expecter) GetPosts(userID interface{}) *MockIUserClient_GetPosts_Call {
	return &MockIUserClient_GetPosts_Call{Call: _e.mock.On("GetPosts", userID)}
}

func (_c *MockIUserClient_GetPosts_Call) Run(run func(userID int)) *MockIUserClient_GetPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockIUserClient_GetPosts_Call) Return(_a0 []model.PostResponse, _a1 error) *MockIUserClient_GetPosts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserClient_GetPosts_Call) RunAndReturn(run func(int) ([]model.PostResponse, error)) *MockIUserClient_GetPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetTodos provides a mock function with given fields: userID
func (_m *MockIUserClient) GetTodos(userID int) ([]model.TodoResponse, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetTodos")
	}

	var r0 []model.TodoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.TodoResponse, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []model.TodoResponse); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.TodoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserClient_GetTodos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTodos'
type MockIUserClient_GetTodos_Call struct {
	*mock.Call
}

// GetTodos is a helper method to define mock.On call
//   - userID int
func (_e *MockIUserClient_Expecter) GetTodos(userID interface{}) *MockIUserClient_GetTodos_Call {
	return &MockIUserClient_GetTodos_Call{Call: _e.mock.On("GetTodos", userID)}
}

func (_c *MockIUserClient_GetTodos_Call) Run(run func(userID int)) *MockIUserClient_GetTodos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockIUserClient_GetTodos_Call) Return(_a0 []model.TodoResponse, _a1 error) *MockIUserClient_GetTodos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserClient_GetTodos_Call) RunAndReturn(run func(int) ([]model.TodoResponse, error)) *MockIUserClient_GetTodos_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: userID
func (_m *MockIUserClient) GetUser(userID int) (*model.UserResponse, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *model.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.UserResponse, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) *model.UserResponse); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserClient_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockIUserClient_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - userID int
func (_e *MockIUserClient_Expecter) GetUser(userID interface{}) *MockIUserClient_GetUser_Call {
	return &MockIUserClient_GetUser_Call{Call: _e.mock.On("GetUser", userID)}
}

func (_c *MockIUserClient_GetUser_Call) Run(run func(userID int)) *MockIUserClient_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockIUserClient_GetUser_Call) Return(_a0 *model.UserResponse, _a1 error) *MockIUserClient_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserClient_GetUser_Call) RunAndReturn(run func(int) (*model.UserResponse, error)) *MockIUserClient_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: page, perPage
func (_m *MockIUserClient) GetUsers(page int, perPage int) (*paging.PagedResultResponse[model.UserResponse], error) {
	ret := _m.Called(page, perPage)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 *paging.PagedResultResponse[model.UserResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*paging.PagedResultResponse[model.UserResponse], error)); ok {
		return rf(page, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int) *paging.PagedResultResponse[model.UserResponse]); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paging.PagedResultResponse[model.UserResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserClient_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockIUserClient_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - page int
//   - perPage int
func (_e *MockIUserClient_Expecter) GetUsers(page interface{}, perPage interface{}) *MockIUserClient_GetUsers_Call {
	return &MockIUserClient_GetUsers_Call{Call: _e.mock.On("GetUsers", page, perPage)}
}

func (_c *MockIUserClient_GetUsers_Call) Run(run func(page int, perPage int)) *MockIUserClient_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockIUserClient_GetUsers_Call) Return(_a0 *paging.PagedResultResponse[model.UserResponse], _a1 error) *MockIUserClient_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserClient_GetUsers_Call) RunAndReturn(run func(int, int) (*paging.PagedResultResponse[model.UserResponse], error)) *MockIUserClient_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIUserClient creates a new instance of MockIUserClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserClient {
	mock := &MockIUserClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
