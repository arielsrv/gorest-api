// Code generated by mockery. DO NOT EDIT.

package controllers

import (
	mock "github.com/stretchr/testify/mock"
	routing "gitlab.com/iskaypetcom/digital/sre/tools/dev/backend-api-sdk/v2/core/routing"
)

// MockIUsersController is an autogenerated mock type for the IUsersController type
type MockIUsersController struct {
	mock.Mock
}

type MockIUsersController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUsersController) EXPECT() *MockIUsersController_Expecter {
	return &MockIUsersController_Expecter{mock: &_m.Mock}
}

// GetUsers provides a mock function with given fields: ctx
func (_m *MockIUsersController) GetUsers(ctx *routing.HTTPContext) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*routing.HTTPContext) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUsersController_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockIUsersController_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx *routing.HTTPContext
func (_e *MockIUsersController_Expecter) GetUsers(ctx interface{}) *MockIUsersController_GetUsers_Call {
	return &MockIUsersController_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx)}
}

func (_c *MockIUsersController_GetUsers_Call) Run(run func(ctx *routing.HTTPContext)) *MockIUsersController_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*routing.HTTPContext))
	})
	return _c
}

func (_c *MockIUsersController_GetUsers_Call) Return(_a0 error) *MockIUsersController_GetUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUsersController_GetUsers_Call) RunAndReturn(run func(*routing.HTTPContext) error) *MockIUsersController_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIUsersController creates a new instance of MockIUsersController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUsersController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUsersController {
	mock := &MockIUsersController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
