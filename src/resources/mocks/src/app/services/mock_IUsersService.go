// Code generated by mockery. DO NOT EDIT.

package services

import (
	mock "github.com/stretchr/testify/mock"
	model "gitlab.com/iskaypetcom/digital/oms/api-core/gorest-api/src/app/model"
)

// MockIUsersService is an autogenerated mock type for the IUsersService type
type MockIUsersService struct {
	mock.Mock
}

type MockIUsersService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUsersService) EXPECT() *MockIUsersService_Expecter {
	return &MockIUsersService_Expecter{mock: &_m.Mock}
}

// GetUsers provides a mock function with given fields:
func (_m *MockIUsersService) GetUsers() ([]model.UserDTO, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []model.UserDTO
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.UserDTO, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.UserDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserDTO)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUsersService_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockIUsersService_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
func (_e *MockIUsersService_Expecter) GetUsers() *MockIUsersService_GetUsers_Call {
	return &MockIUsersService_GetUsers_Call{Call: _e.mock.On("GetUsers")}
}

func (_c *MockIUsersService_GetUsers_Call) Run(run func()) *MockIUsersService_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIUsersService_GetUsers_Call) Return(_a0 []model.UserDTO, _a1 error) *MockIUsersService_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUsersService_GetUsers_Call) RunAndReturn(run func() ([]model.UserDTO, error)) *MockIUsersService_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIUsersService creates a new instance of MockIUsersService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUsersService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUsersService {
	mock := &MockIUsersService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
